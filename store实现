对图片进行压缩，JPG的推荐jpegmin这个软件，png的推荐https://tinypng.com/，前面这两个是压缩后不会失真的，gif的推荐GIF Optimizer，但可能会有毛边。

        注册store tree
        1通过全局唯一的store对象管理项目中的state
        var store = createStore(reducer,initialState)
        2.通过store注册listtener，注册的listener会在store tree每次变更后执行

        如何更新store tree
        1.store调用dispath，通过action把变更的信息传递给reducer
        var action = { type : 'add' }
        store.dispatcher(action)
        2.store根据action携带type在reducer中查询变更具体要执行的方法，执行后返回新的state
        export default(state = initialState,action){
            switch(action.type){
                cass 'add':
                return{
                  count:state.count + 2
                }
                break;
                default:
                  break;        注册store tree
        1通过全局唯一的store对象管理项目中的state
        var store = createStore(reducer,initialState)
        2.通过store注册listtener，注册的listener会在store tree每次变更后执行

        如何更新store tree
        1.store调用dispath，通过action把变更的信息传递给reducer
        var action = { type : 'add' }
        store.dispatcher(action)
        2.store根据action携带type在reducer中查询变更具体要执行的方法，执行后返回新的state
        export default(state = initialState,action){
            switch(action.type){
                cass 'add':
                return{
                  count:state.count + 2
                }
                break;
                default:
                  break;
            }
        }
        3.reducer执行后返回的新状态会更新到store tree中，触发由store.subscribe()注册的listener

            }
        }
        3.reducer执行后返回的新状态会更新到store tree中，触发由store.subscribe()注册的listener


  Store实现
        主要方法：
          createStore
          combineReducers
          bindActionCreators
          applyMiddleWare
          compose

          createStore源码分析
          createStore方法用来注册一个store，返回为包含了若干方法的对象,方法体如下：
          export var ActionTypes = {
            INIT:'@@redux/INIT'
          }
          export default function createStore(){
            function getState(){}
            function dispatch(){}
            function subscribe(){}
            dispatch({type:ActionTypes.INIT})
            return {
              dispatch,
              subsribe,
              getState,
              replaceReducer
            }
          }

          下面逐个代码段分析功能
          createStore(
            reducer:(state,action) => nextState,
            preloadedState:any,
            enhancer:(store) =>　nextStore
          ) => {
            getState:() => any,
            subscribe:(listener: () => any) => any,
            dispatch:(action:{type:''}) => {type:""},
            replaceReducer:(nextReducer:(state,action) => nextState) => void
          }
          可以看出整个函数是一个闭包结构，参数有三个，返回值公开出若干个方法
          dispatch:分发action，
          subscribe:注册listener,监听state变化，
          getState:读取store tree中所有state，
          replaceReducer：替换reducer，改变state更新逻辑

          getState直接返回store tree状态
          var currentReducer = reducer
          var currentState = preloadedState
          var currentListeners = []
          var nextListeners = currentListeners
          var isDispatching = false

          function ensureCanMutateNextListeners(){
            if(nextListeners == currentListeners){
              nextListeners = currentListeners.slice()
            }
          }
          function getState(){
            return currentState
          }
          定义了createStore内部都要用到的全局变量，其中curreReducer,currentState声明当前reducer方法集合和store tree状态，初始值为外部传入的createStore参数，currentListeners和nextListeners定义了存放store变化时要执行响应函数的数组集合

          subcribe()
          Redux采用了观察者模式，store内部维护listener数组，用于存储所有通过store.subscrib注册的listener，store.subscrib返回unsubscrib方法，用于注销当前listener，当store.tree跟新后，一次执行数组中的listener
          function subcribe(listener){
            if(typeof listener !== 'function'){
              throw new Error('Expected listener to be a funciton)
            }
            var isSubscribed = true
            ensureCanMutateNextListeners(){
              nextListeners.push(listener)
              return function unsubcribe(){
                if(!isSubscribe){
                  return
                }
              }
              isSubscribed = false
              ensureCanMutateNextListeners(){
                var index = nextListener.indexOf(listener)
                nextListeners.splice(index,1)
              }
            }
          }

          dispatch()方法主要完成两件事
          1.根据action查询reducer中变更state的方法，更新store tree
          2.变更store tree后，依次执行listener中所有响应函数
         
         function dispatch(action){
            if(!isPlainObject(action)){
              throw new Error(
                'Action must be plain objects'
              )
            }
            if(typeOf action.type === 'undefined'){
              throw new Error(
                'Actions may not have an undefined type'
              )
            }
            if(isDispatching){
              throw new Error('Reducers may not dispatch action')
            }
            try{
              isDispatching = true
              currentState = currentReducer(currentState,action) //核心代码
            }finally{
              isDispatching = false
            }
            var listeners = currentListeners = nextListeners
            for(var i = 0; i < listeners.length;i++){
              linsteners[i]()
            }
            return action
         }

         replaceReducer()
        replaceReucer用于替换操作store tree中state的方式
        function replaceReducer(nextReducer){
          if(typeOf nextReducer !== 'function'){
            throw new Error('Expected the nextReducer to be a functon')
