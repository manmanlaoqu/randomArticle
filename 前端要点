   
  前端工程化:模块化，组件化，规范化，自动化
  一.规范化：
  · 目录结构的制定
  · 编码规范
  · 前后端接口规范
  · 文档规范
  · 组件管理
  · git分支管理
  · commit描述规范
  · 定期codeReview
  · 视觉图标规范
  
  二.组件化开发与资源管理  
   
  1.导入：
  导入一个模块中的某个导出内容
  import { zipcodevalidator } from '. zipcodevalidator'
  let myValidator = new zipcodevalidator()
  
  对导入内容重命名：
  import {zipcodevalidator as zcv} from '. zipcodevalidator'
  
  将整个模块导入到一个变量，并通过它来访问模块的导出部分
  import   as validator from '. zipcodevalidator'
  let myvalidator = new validator.zipcodevalitator()
  
  2.export = 和 import = require()
  使用export= 导出一个模块，必须使用特定语法：import module = require('module')导入此模块
  
  3.生成模块代码：根据编译时指定的模块目标函数，编译器会生成响应的工Node.js（commonJS）,Require.js(AMD)，UMD等模块加载系统使用的代码
  本质上,export default就是输出一个叫做default的变量或方法，然后系统允许你取任意名字
  funciton add(x,y){
  return x   y
  }
  
    modules.js
  export { add as default }   等价于 export default add;
  
  import { default as foo } from '. modules'   等价于import foo from 'modules'
  正因为export default命令其实只是输出一个叫做default的变量，所以他后面不能跟变量声明语句
  
  ES6模块与commonjs模块差别：
  · commonjs模块输出是一个值的拷贝，es6模块输出的是值的引用
  · commonjs模块是运行时加载，es6模块式编译是输出接口
  · commonjs模块加载的是一个对象（即module.exports属性）,只有在脚本运行完才生成；es6模块不是对象，它的对外接口只是一个静态定义，在代码静态解析阶段就会生成。
  
  node的import命令只支持加载本地模块，如果模块名不含路径，那么import命令会去node_modules目录寻找这个模块，如果脚本文件省略后缀名，会依次尝试四个后缀名
  mjs,.js,.json,.node,如果这些脚本文件不存在，node就会加载package.json的main字段，不存在就依次加载 index.mjs, index.js, index.json, index.node如果以上四个文件还不存在，就抛出错误
  node的import命令是异步加载
 
  
  性能体系的建立可以分为以下几部分：
  现状评估和建立指标
  技术方案
  执行
  结果评估和监控
  
  一.现状评估和建立指标
  两个方面：对于用户来说，什么样的指标能够评估好的体验，对于公司来说，什么样的指标能够影响公司的业务价值，针对这两点，性能问题分为以下几个重要的点：
  页面加载性能---与用户流失率有很强的关联性----指标：用户平均加载时间
  动画与操作性能
  内存，电量损耗
  二.技术方案
  缓存，降低请求成本，减少传输体积，减少请求数
  三.执行
  工程水平分为三个阶段:
  纯管理
  制度化
  自动化：在一些重要的操作路径上设置规则，针对我们性能优化
  
 
    工具链
  元问题：我们对工具本身的要求是什么:版本一致，避免冲突，解决这两个问题就引入工具链的概念，工具链式一系列互相配合的工具，能够协作开发任务，包含编译，链接，调试等工具
  
    持续集成
  定义：在软件开发过程中，以定期或者实时的方式，集成所有人的工作成果，做统一的构建和测试，现在持续集成还有升级版本：持续交付和持续部署
  目标：
  
  
    搭建系统目标
  解决大量的简单页面生产问题，
  js核心语法包括两个部分：基本语法构造（操作符，控制结构，语句）和标准库（各种功能的对象如array，date，math），宿主环境提供的api、
  宿主如果是浏览器，会提供三大类api：浏览器控制类：操作浏览器;DOM类：操作网页的各种元素；web类：实现互联网的各种功能
  宿主如果是服务器，会提供各种操作系统api，比如文件操作api，网络通信api，都可以在node环境中找到
  
  
  数值，字符串，布尔值三种类型，原始类型值，对象为合成类型有狭义的对象，数组
  
  undefined与null效果一致 undefined == null   true 
  null是一个空对象，转为数值是0
  undefined状态数值是NaN（非数字）
  js自动将空字符串转为false，空数组或者空对象对应的布尔值都是true
  js内部所有数字是以64位浮点数形式储存，底层根本没有整数
  字符串可以视为字符数组，js引擎内部所有字符都用unicode表示\u00A9代表版权符号
  以文本格式传递二进制数据，可以使用base64编码，所谓base64是一种编码方法，可以将任意值转为0~9，A~Z,a-z,+, ，这64个字符组成的可打印字符，使用它的目的是为了不出现特殊字符，简化程序处理
  btoa()：任意值转为Base64编码
  atob():Base64编码转为原来的值
  这两个方法不适合非 ASCII 码的字符，会报错。
  要将非ASCII码字符转为Base64编码，必须中间插入一个转码环节，再使用这两个方法
  function b64Encode(str){
  return btoa(encodeURIComponent(str))
  }
  fumction b64Decode(str){
  return decodeURIComponent(atob(str))
  } 
  b64Encode('你好')   "JUU0JUJEJUEwJUU1JUE1JUJE"
  b64Decode('JUU0JUJEJUEwJUU1JUE1JUJE')    "你好"
  
  
  对象是一组键值对的集合，是一种无序的复合数据集合，对象所有的键名是字符串，对象的每一个键名又称为属性，它的键值是任何数据类型，如果是一个函数，通常把这个属性陈伟方法，可以调用
  如果不同的变量名指向同一个对象，他们都是这个对象的引用，也就是一个内存地址，修改其中一个变量会影响到其他所有变量，如果取消其中一个变量对于源对象的引用，
  如果两个变量指向同一个原始类型的值，那么，变量是值的拷贝
  
  读取属性，两个方法，一个是使用点运算符，另一种使用方括号运算符,使用方括号运算符，键名必须放在引号里，不然会当做变量处理
  var obj = {
  p:'Hello World'
  }
  obj.p   
  obj['p']
  
  
  查看所有属性:object.keys()方法
  delete命令用于删除对象的属性，删除成功后返回true，delete命令只能删除对象本身的属性，无法删除继承的属性
  for in 循环，提取对象属性名的例子
  var obj = {
  x:1,
  y:2
  }
  var props = []
  var i = 0
  for(var i in obj){
  props[i++] = p
  }
  
  props   ['x','y']
  
  任何类型的数据都可以放入  函数命名：function开头，函数表达式（赋值法），构造函数
  es5的规范，不得在非函数的代码块中声明函数，比如if和try语句
  函数本身也是一个字。也有自己的作用域，它的作用域与变量一样，就是声明时所在的作用域，与其运行时所在的作用域无关
  var a = 1
  var x = function(){
  console.log(a)
  } 
  function f(){
  var a = 2;
  x()
  }
  f()    1
  函数x是在函数f的外部声明的，所以它的作用域在外层，内部变量a不会到函数f体内取值，所以输出1，而不是2
  总之，函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域
  同名参数，去最后出现的那个值
  
  
  闭包：理解闭包，需要理解变量作用域
  函数外部无法读取函数内部声明的变量
  function f1(){
  var n = 100
  }
  console.log(n)    报错
  
    可以访问内部变量
  function f1(){
  var n = 100
  function f2(){
  console.log(n)   100
  }
  return f2
  }
  var result = f1()
  result()   100
  闭包就是讲函数内部和函数外部连接起来的一座桥梁，闭包最大的用处就是读取函数内部的变量，让这些变量保持在内存中，闭包使得内部变量记住上一次调用时的运算结果
  闭包的另一个好处就是封装对象的私有属性和私有方法
  function Person(name){
  var _age;
  function setAge(n){
  _age = n
  }
  function getAge(){
  return _age
  }
  return {
  name:name,
  getAge:getAge,
  setAge:setAge
  }
  }
  var p1 = Person('张三')
  p1.setAge(25)
  pi.getAge()   25
  上面代码中，函数Person的内部变量_age，通过闭包getAge和setAge，变成返回对象p1的私有变量
  
  对象相加，必须先转为原始类型的值，然后在相加
  var obj = { p: 1}
  obj + 2    [object object]2
  对象转为原始类型的值，
  首先，自动调用对象的valueOf方法
  var obj = { p : 1}
  obj.valueOf()   { p：1 }
  obj.valueOf().toString()   [object object]
  知道了这个规则以后，就可以自己定义valueOf方法或toString方法，得到想要的结果
  var obj = {
  valueOf:function {
  return 1
  }
  }
  
  
  字符串按照字典顺序进行比较
  非字符串的比较：
  (1)原始类型的值
  除了相等运算符和严格相等运算符，其他运算符都是先转为数值再比较
  (2)对象
  会先转为原始类型的值，在进行比较，对象转换为原始类型的值，算法是先调用valueOf方法，如果返回的还是对象，再接着调用toString方法
  
  !undefined   true !null   true ！0   true !NaN   true !""   true ![]   false !{}   false
  
  
  且运算符（&&）往往用于多个表达式的求值，运算规则：如果第一个运算子的布尔值为true，则返回第二个运算子的值,如果第一个运算子的布尔值为false，则直接返回第一个运算子的值
  或运算符是相反的
  
  void运算符的作用是执行一个表达式，然后不返回任何值，或者返回undefined，这个运算符主要用途是浏览器的书签工具，以及在超级链接中插入代码防止网页跳转
  
  js是一种动态类型语言，变量没有类型限制，可以随时赋予任何值
  
  错误机制
  1.SyntaxError对象：解析代码时发生的语法错误
    变量名错误
var 1a;
   Uncaught SyntaxError: Invalid or unexpected token

   缺少括号
console.log 'hello');
   Uncaught SyntaxError: Unexpected string
  
  2.ReferenceError对象:引用一个不存在的变量时发生的错误，使用了不存在的变量，等号左侧不是变量，
  3.RangeError对象，是一个值超出有效范围时发生的错误，有几种情况，意识数组长度为负数，而是Number对象的方法参数超出范围，以及函数堆超过最大值
  4.TypeError对象是变量或者参数不是预期类型时发生的错误，对字符串、布尔值、数值等原始类型的值使用new命令，就会抛出这种错误，因为new命令的参数应该是一个构造函数。
  
  对象
  1.属性描述对象：是否科学，可比案例，内部数据结构成为属性描述对象
  函数编程
  构造函数，需要一个模板表示某一类实物的共同特征，然后对象根据模板生成,
  典型的面向对象编程语言，所谓'类'就是对象的模板，对象就是'类'的实例
  js语言的对象体系不是基于'类'的，而是基于构造函数(constructor)和原型链(prototype)，js使用构造函数作为对象的模板，构造函数就是专门用来生成实例对象的函数
  一个构造函数可以生成多个实例对象，构造函数就是一个普通的函数，但是有自己的特征和用法
  
  this就是属性或方法当前所在的对象
   
  vitrual Dom是一个轻量级的js对象，最初只是real Dom的副本，是一个节点树，将元素属性和内容作为对象及其属性，react的渲染函数从react组件中创建一个节点树，然后它
  响应数据模型中的变化来更新该树，该变化由用户或系统完成的各种动作完成
  
  浏览器能够读取jsx，需要像babel这样的jsx转换器将jsx转换为js对象，然后再将其传给浏览器
  react组件强制要求必须有一个render（）,返回一个react元素，是原生DOM组件的表示
  Props只能从父组件传给子组件，维护单向数据，不可变的
  状态时react的核心，是数据的来源，基本上状态时组件呈现和行为的对西安就那个，是可变的
  this.setState()更新组件的状态
  
  
  class MyComponent extends React.Component{
  constructor(){
  super()
  this.state = {
  name:'12',
  id:'101'
  }
  }
  render(){
  setTimeout( () => this.setState({name:'1232',id:1232}),200)
  return (
  <div>组件< div>
  )
  }
  }
  ReactDOM.render(
  <MyConponent  >,getElementById('content')
  )
  
  componentWillMount()
  
  
  <MyInput onChange={this.handleChanage.bind(this)}>
  
  ref是react中引用，由组件渲染配置函数返回，用于对render返回的特定元素或组件的引用，当需要DOM测量或向组件添加方法时可用
  
  如何模块化react中的代码：可以使用export和i   
  Object对象方法
  1.Object.getPrototypeOf() 获取原型对象的标准方法
  var F = function(){}
  var f = new F()
  Object.getPrototypeOf(f) === F.prototype 
   
  构造函数的继承，让一个构造函数继承另一个构造函数，分为两步实现：第一步是在子类的构造函数中，调用父类的构造函数；第二步，让子类的原型指向父类的原型，这样子类就可以继承父类原型
 工程领域，明确的目的性
  组件化还有兼容性问题，框架，第一代前端框架jquery，ptorotypejs解决了兼容问题和API的易用性问题；第二代前端框架解决了组件化问题
  1.组件化
  组件化方案，目前有五大主流选择：web Component,vue,react,angular,自研
  2.兼容性和适配性
  兼容性在现代浏览器都不怎么存在 
  适配问题主要适配的是屏幕的三个要素：单位英寸像素数（ppi），设备像素率(物理像素与逻辑像素px的对应关系)，分辨率，在当前环境下，分辨率可以使用vw单位解决DPR，ppi主要影响的是文字，可以使用media规则来适配
  3.单页应用
  
  
  
