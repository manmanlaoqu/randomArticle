《重学前端》——建立知识架构，追本溯源（原理和背景）
1.
1.1文法可以分成词法和语法，来自编译原理的划分，语义跟语法具有一一对应关系
1.2运行部分：程序 = 算法 + 数据结构，对于运行时来说，类型就是数据结构，执行过程就是算法。
1.3词法包括：各种直接量，关键字，运算符；语法和语义包括：表达式，语句，函数，对象，模块；类型包括：对象，数字，字符串

2.
2.1Javascript 分为运行时、文法、语义；0
2.2运行时分为数据结构、执行过程（算法）；
2.2.1 数据结构分为类型、实例；
2.2.1.1 类型分为对象  类型系统是它的7中基本类型和7种语言类型
2.2.1.2 实例分为应用和机制  实例就是它的内置对象部分
2.2.2 执行过程分为事件循环、微任务的执行、函数执行、语句级执行
2.3文法分为语法和词法

3.HTML与 CSS
3.1HTML分为元素、语言、补充标准
3.1.1 元素分为文档元信息、语义相关内容、连接、替换型元素（video、img等）、表单、表格、总集
3.1.2 语言分为实体、命名空间
   
3.2CSS分为语言、功能
3.2.1 语言分为@rule、选择器、单位
3.2.2 功能分为布局、绘制、交互
3.2.2.1 布局分为正常流、弹性布局
3.2.2.2 绘制分为颜色和形状、文字相关
3.2.2.3 交互分为动画、其他交互 

4.浏览器的实现原理和API
4.1浏览器的实现原理分为解析、构建DOM树、计算CSS、渲染、合成和绘制
4.2API分为DOM、CSSOM、事件、API总集合




5.前段工程实践
5.1分为性能、工具链、持续集成、搭建系统、架构和基础库







第一课时 Javascript类型
1. 七种语言类型是undefined、Null、Boolean、String、Number、Symbol、Object`
  这一讲中了解到void 0是可以获取undefined值，undefined不是关键字，可以是一个变量；双精度导致两式不等；Symbol是一切非字符串的对象key的集合。
  整个对象系统都被Symbol重塑。
   对象:Javascript中的‘类’仅仅是运行时对象的一个私有属性，而Javascript中是无法自定义类型的。对象类型是Number、String、Boolean、Symbol，
   他们是构造器， 使用new方式创建对象，直接调用表示强类型转换，Symbol不可new。认识到3 与 Number(3)是完全不同的值，一个是Number类型，
   一个是对象类型

第二课时Javascript对象
1.从运行时角度来谈论对象，就是在讨论Javascript实际运行中的模型
2.任何编程语言，对象的本质特征：唯一标识性（内存地址）、状态、具有行为。行为和状态在Javascript统一抽象为‘属性’。
Js中的对象具有高度的动态性，在运行时为对象添加状态和行为的能力。在一开始定义了对象o,定义完成后再添加它的属性b，即:
var o = { a: 1 };
o.b = 2
以上是两种不同的属性定义方式

3.为了提高抽象能力，Javascript的属性设计的更加复杂的形式，提供了数据属性和访问器属性（getter/setter）
4.对Js来说，属性并非只是简单的名称和值，js用一组特征（attribute）来描述属性（property）
 4.1 第一类属性：数据属性（四个特征）
·value  属性的值
·writable  决定属性能否被赋值
·enumerable 决定for in能否枚举该属性
·configurable  决定该属性能否被删除或者改变特征值
 4.2 第二类属性：访问器属性(getter/setter)
  ·getter 函数或undefined，在取属性值时被调用
  ·setter 函数或undefined，在设置属性时被调用
  ·enumberable  决定for in能否枚举该属性
  ·configurable  决定该属性能否被删除或者改变特征值
 
6.定义属性的代码会产生数据属性，默认设置为true，可以使用内置函数(js的API)Object.getOwnPropertyDescripter来查看；
如果想改变属性的特征，或者定义访问器属性，可以使用Object.defineProperty
Var o = { a:1 }
Object.defineProperty(o,’b’,{value:2,writable:false,enumberble:false,configurable:true})
Object.getOwnPeropertyDescriptor(‘o’,’b’)
O.b = 3
Console.log(o.b)  //始终为2
5.在创建对象时，可以使用get和set关键字来创建访问
Var o = {get a(){ return 1 }   }
    Console.log(o.a)   //1
访问器属性与数据huxing butong 

第三课时Javascript需要模拟类么？
什么是原型？
‘基于类’的编程提倡使用换一个关注基于类和类之间关系开发模型，先有类再从类去实例化一个对象。类与类之间又可能会形成继承。、组合等关系。
‘基于原型’的编程关注一系列对象与对象的关系,实例的行为，

Javascript的原型：1.所有对象都用私有字段【prototype】，就是对象的原型；
    2.读一个属性，对象本身没有，就继续访问对象的原型，直到原型为空或找到为止。
    
 操作原型方法：
·Object.create 根据指定的原型创建新对象，原型可为null
·Object.getPrototypeOf 获得一个对象的原型
·Object.setPrototypeOf  设置一个对象的原型

 早期版本中的类与原型
早期，‘类’的定义是一个私有属性【class】，语言标准为内置类型诸如Number、String、Date等指定了【class】属性，以表示他们的类。
唯一可访问【class】属性的方式为Object.prototype.toString
在ES5开始，【class】私有属性被Symbol.toStrignTag代替
New运算符接受一个构造器和一组调用参数，实际上做了几件事：
·以构造器的prototype属性为原型，创建新对象
·将this和调用参数传给构造器，执行
·如果构造器返回的是对象，则返回，否则返回第一步创建的对象


ES6中的类，加入class
       class Animal{
          constructor(name){
      this.name = name
}
} 
speak(){
           console.log(this.name + ‘make a noise’)
}	   
   class Dog extends Animal{
 Constructor(name){
super(name)
}
speak(){
console.log(this.name + ‘barks’)
}
} 
let d = new Dog(‘Mizzle’)
d.speak()   /   /Mizzle barks
比起早期的原型模拟方式，使用extends关键字自动设置了constructor，并且会自动调用父类的构造器函数。


第四课时js执行---有多少种函数
关于this关键字：使用方法类似于一个变量，普通变量的行为和机制，就是var声明和赋值，let的内容
1.this行为
this是执行上下文中很重要的一个组成部分，同一个函数调用方式不同，得到的this值也不同
普通函数this值由‘调用它所使用的引用’决定，奥秘就在于：我们获取函数的表达式，实际返回的并非函数本身，而是一个Reference类型，
Refrence类型由一个对象和一个属性值构成
2.this机制
  函数能记住定义时的this，函数内部有一些机制来保存这些信息
      在js标准中，为函数规定了来保存定义时上下文的私有属性【Environment】，
      当一个函数执行时，会创建一条新的执行环境记录，记录的外层词法环境会被设置成函数的【Environment】
     这个动作就是切换上下文了







例如：
  var a = 1
  foo(); 
 在别处定义了foo
var  b = 2
function foo(){
   console.log(a) //undefined
   console.log(b) //2
}
这里foo能访问b（定义时词法环境），不能访问a（执行时的词法环境），就是这行上下文的切换机制了
3.当函数调用时，会入栈一个新的执行上下文，函数调用结束时，执行上下文被出栈
This是一个复杂机制，js标准定义了【thisModel】私有属性
 【thisModel】私有属性三个取值：
·lexical：表示从上文中找this，对应箭头函数
·global：表示this为undefined时，取全局对象，对应了普通函数
·strict：当严格模式时使用，this严格按照调用时传入的值，可能为null或者undefined -----对应o.showThis
代码执行遇到this时，会逐层检查当前词法环境记录中【thisBindStatus】，当找到this的环境记录时获取this的值
操作this的内置函数apply，call


第五课时 闭包和执行上下文是怎么回事
闭包其实就是携带了执行环境
执行上下文：执行的基础设施，js标准把一段代码（包括函数），执行所需的所有信息定义为‘执行上下文’
ES2018标准：
·lexical environment:词法环境，当获取变量或者this值时使用
·variable environment变量环境，当声明变量时使用
 ....还有还几个，省略

第六课时 js需要模拟类么？
原型，照猫画虎，基于原型的编程语言，利用原型来描述对象，js就是代表
基于类的编程提倡使用一个关注分类与类之间的关系开发模式，要先有类，再从类去实例化一个对象，类与类之间会形成继承，组合关系。
基于言行的编程更提倡关注一系列对象实例的行为，后去关心如何将这些对象划分到最近的使用方式相似的原型对象。可以创建一个全新的对象。
原型系统更多与高动态性语言配合，并且多数基于原型的语言提倡运行时的原型修改。
原型系统的‘赋值操作’两种实现思路：
·一个是并不真的去复制一原型对象，而使得新对象持有一个原型的引用
·另一个是切实地复制对象，从此连个对象再无关联
而js采用的是第一种
Js原型系统，用两条概括：
·如果所有对象都有私有字段【prototype】，就是对象的原型
·读一个属性，如果对象本身没有，则会继续访问对象的原型，直到原型为空或者找到为止
Es6以来，js提供了一系列内置函数，以便直接操纵原型,三个方法为：
·Object.create
·Object.getPrototypeOf
·Object.setPrototypeOf

new运算接受一个构造器和一组调用参数，操作具体做的事：
·以构造器的prototype属性为原型，创建新对象
·以this和调用参数传给构造器，执行
·如果构造器返回的是对象，则返回，否则返回第一步创建的对象

new这样的行为，试图让函数对象在语法上跟类变得相似，但是，客观上提供了两种方式：
·在构造器中添加属性
·在构造器的prototype属性上添加属性

第七课时 语句执行原理（从try，finally出发解释）
1.Completion 类型（基础类型）
Complete Record表示一个语句执行完成之后的结果，有三个字段
·【type】表示完成的类型，有break，continue，return，throw和normal几种类型
·【value】表示语句的返回值，如果语句没有，则是empty
·【target】表示语句的目标，通常是一个js标签

2.普通语句（不带控制能力的语句）
 ·声明类语句
·var声明
·const声明
·let声明
·函数声明
·类声明
 ·表达式语句
 ·空语句
 ·debugger语句
2.1普通语句执行后，获得到【type】为normal的Completion Record，会继续执行下一条语句；这些语句中只有表达式语句会产生【value】，
因此在控制台上输入var a = 1会得到undefined，如果输入a = 1会得到1
2.2 语句块
2.3 控制型语句（分两部分）
·对内部造成影响：if，switch，while，for，try
·对外部造成影响：break，continue，return，throw
Js语句存在嵌套关系，所以执行过程实际上主要在一个树形结构上进行，树形结构的每一个节点执行后产生Compl'etion Record，
根据语句的结构和Completion Record,js实现了各种分支和跳出逻辑

第八课时文法
文法是编译原理中对语言的写法的一种规定，一般文法分为词法和语法两种
对于’/’与’/=’,还有‘/abc/’，对于词法分析来说，其实是没办法处理的，所以js的解决方案是定义两组词法，然后考语法分析传一个标志给词法分析器，
让它来决定使用那一套语法
这不跟内容包括：空白符号，换行符，注释，标识符名称，符号，数字直接量，字符串直接量，正则表达式直接量，字符串模板。
掌握词法对我们调试代码至关重要。


第九课时编译原理
分析
·定义四则运算：产生四则运算的词法和语法定义
·词法分析：把输入的字符串流变成token
·语法分析：把token变成抽象语法树AST
·解释执行：后序遍历AST，执行得出结果
语法定义多数采用BNF，语法定义的核心思想不会变，都是几种结构的组合产生一个新的结构，所以语法定义也叫语法产生式。
加法是由若干个乘法再由加号或者减号连接成的：

词法分析：状态机
词法分析部分，把字符流变成token流，词法分析有两种方案，一种是状态机，一种是正则表达式
语法分析：LL
LL语法分析根据每一个产生式来写一个函数
解释执行
通过实验，了解了产生式，词法分析，语法分析和解释执行的过程





表达式语句实际就是一个表达式，它是由运算符连接变量或者直接量构成的
一般，我们的表达式语句要么是函数调用，要么是赋值，要么是自增，自减，否则表达式计算的结果没有任何意义
PrimaryExpression主要表达式
MemberExpression 成员表达式 ： 通常是用于访问对象成员，使用标识符的属性访问和用字符串的属性访问
NewExpression NEW表达式
CallExpression 函数调用表达式
LeftHandSideExpression 左值表达式----用于构成赋值表达式
AssignmentExpression 赋值表达式
Expression表达式


第十课时语法结构
1.脚本和模块
js有两种源文件
·一种叫脚本：可以由浏览器或者node环境引入执行的，具有主动性的js代码段，控制宿主完成一定任务的代码
·一种叫模板：只能由js代码用import引入执行，被动性的js代码块段，是等待被调用的库
2.import声明
·直接import一个模块：只是保证了这个模块代码被执行，引用它的模块是无法获得它的任何信息
·带from的import：引用模块中的一部分信息，可以把它们变成本地的变量，又分成三类
·import x from ‘./a.js’  引入模块中导出的默认值
·import { a as x,modify } form ‘./a.js’ 引入模块中的变量
·import * as x from ‘./a.js’ 把模块中的变量以类似对象属性的方式引入

3.export default表示导出一个默认变量值
4.Js引擎除了执行脚本和模块之外，还可以执行函数，而函数体跟脚本与模块有一定的相似之处
5.三种语法结构：可以认为，宏务可能执行的代码包括：脚本，模块和函数体（普通函数体，异步函数体，生成器函数体）
6.Js语法的全局机制：预处理（理解var等声明类语句的行为）和指定序言（解释严格模式）


第九课时 JS语句
JS语句分为声明和语句

第十课时 浏览器事件
1.事件概述
1.1 输入设备
· 键盘
· 鼠标
· 触摸屏
触摸屏和鼠标共性，被称为pointer设备，指的是它的输入最终会被抽象成屏幕上的一个点；两者区别是精度、反应时间、支持的点的数量不一样
   
 1.2  现代的UI系统，都源自WIMP（window、icon、menu、pointer）,由施乐公司研发
 1.3 观点：能够‘点击一个按钮’，实际上，我们只能够点击鼠标上的按钮或者触摸屏，是操作系统和浏览器把这个信息对应到了一个逻辑上的按钮，
 再使得它的视图对点击事件有反应。
也就是：点击事件来自触摸屏或者鼠标，鼠标点击并没有位置信息，但是一般操作系统会根据位移的积累计算出来，跟触摸屏一样，提供一个坐标给浏览器。

2. 捕获与冒泡
2.1 一个事件发生时，捕获与冒泡过程总是先后发生，与监听无关
2.2 在实际监听事件时，建议默认使用冒泡模式，当开发组件时，遇到需要父元素控制子元素的行为，可使用捕获机制
2.3 addEventListener 有三个参数
· 事件名称
· 事件处理函数
· 捕获还是冒泡
3.焦点
3.1 Pointer事件时由坐标控制，键盘事件是由焦点系统控制。操作系统也会提供一套焦点系统，但现代浏览器一般都选择自己的系统内覆盖原本的焦点系统
3.2 焦点系统也是视障用户访问的重要入口
3.3 旧时代，输入框上有虚线框，这是windows焦点系统附带的UI表现，现在就不用虚线框表示了。焦点系统认为整个ui系统中，有且仅有一个‘聚焦’元素，
所有的键盘事件的目标元素就是这个聚焦元素。Tab键被用来切换下一个可聚焦的元素，可以使用js来阻止这个行为
3.4 浏览器API提供API来操作焦点：
· document.body.focus()
· document.body.blur()

4. 自定义事件
4.1 除了来自输入设备的事件，还可以自定义事件DOM API中的事件不能用于普通对象，只能在DOM元素上使用自定义事件，例如：
var evt  = new Event(‘look’,{‘bubbles’:true,’cancelable’:false})
Document.dispatchEvent(evt)
这里使用了Event构造器创造了一个新的事件，然后用dispatchEvent来在特定元素上出发，可以给这个Event添加自定义属性、方法





